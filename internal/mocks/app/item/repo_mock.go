// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubny/lite-reader/internal/app/item (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=./app/item/repo_mock.go -package=mocks -mock_names=Repository=Repository github.com/cubny/lite-reader/internal/app/item Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	item "github.com/cubny/lite-reader/internal/app/item"
	gomock "go.uber.org/mock/gomock"
)

// Repository is a mock of Repository interface.
type Repository struct {
	ctrl     *gomock.Controller
	recorder *RepositoryMockRecorder
	isgomock struct{}
}

// RepositoryMockRecorder is the mock recorder for Repository.
type RepositoryMockRecorder struct {
	mock *Repository
}

// NewRepository creates a new mock instance.
func NewRepository(ctrl *gomock.Controller) *Repository {
	mock := &Repository{ctrl: ctrl}
	mock.recorder = &RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Repository) EXPECT() *RepositoryMockRecorder {
	return m.recorder
}

// DeleteFeedItems mocks base method.
func (m *Repository) DeleteFeedItems(feedID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeedItems", feedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeedItems indicates an expected call of DeleteFeedItems.
func (mr *RepositoryMockRecorder) DeleteFeedItems(feedID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeedItems", reflect.TypeOf((*Repository)(nil).DeleteFeedItems), feedID)
}

// GetFeedItems mocks base method.
func (m *Repository) GetFeedItems(feedID int) ([]*item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedItems", feedID)
	ret0, _ := ret[0].([]*item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedItems indicates an expected call of GetFeedItems.
func (mr *RepositoryMockRecorder) GetFeedItems(feedID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedItems", reflect.TypeOf((*Repository)(nil).GetFeedItems), feedID)
}

// GetStarredItems mocks base method.
func (m *Repository) GetStarredItems() ([]*item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarredItems")
	ret0, _ := ret[0].([]*item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStarredItems indicates an expected call of GetStarredItems.
func (mr *RepositoryMockRecorder) GetStarredItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredItems", reflect.TypeOf((*Repository)(nil).GetStarredItems))
}

// GetStarredItemsCount mocks base method.
func (m *Repository) GetStarredItemsCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarredItemsCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStarredItemsCount indicates an expected call of GetStarredItemsCount.
func (mr *RepositoryMockRecorder) GetStarredItemsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredItemsCount", reflect.TypeOf((*Repository)(nil).GetStarredItemsCount))
}

// GetUnreadItems mocks base method.
func (m *Repository) GetUnreadItems() ([]*item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadItems")
	ret0, _ := ret[0].([]*item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadItems indicates an expected call of GetUnreadItems.
func (mr *RepositoryMockRecorder) GetUnreadItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadItems", reflect.TypeOf((*Repository)(nil).GetUnreadItems))
}

// GetUnreadItemsCount mocks base method.
func (m *Repository) GetUnreadItemsCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadItemsCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadItemsCount indicates an expected call of GetUnreadItemsCount.
func (mr *RepositoryMockRecorder) GetUnreadItemsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadItemsCount", reflect.TypeOf((*Repository)(nil).GetUnreadItemsCount))
}

// ReadFeedItems mocks base method.
func (m *Repository) ReadFeedItems(feedID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFeedItems", feedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFeedItems indicates an expected call of ReadFeedItems.
func (mr *RepositoryMockRecorder) ReadFeedItems(feedID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFeedItems", reflect.TypeOf((*Repository)(nil).ReadFeedItems), feedID)
}

// UnreadFeedItems mocks base method.
func (m *Repository) UnreadFeedItems(feedID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnreadFeedItems", feedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnreadFeedItems indicates an expected call of UnreadFeedItems.
func (mr *RepositoryMockRecorder) UnreadFeedItems(feedID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnreadFeedItems", reflect.TypeOf((*Repository)(nil).UnreadFeedItems), feedID)
}

// UpdateItem mocks base method.
func (m *Repository) UpdateItem(id int, starred, isNew bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", id, starred, isNew)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *RepositoryMockRecorder) UpdateItem(id, starred, isNew any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*Repository)(nil).UpdateItem), id, starred, isNew)
}

// UpsertItems mocks base method.
func (m *Repository) UpsertItems(feedID int, items []*item.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertItems", feedID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertItems indicates an expected call of UpsertItems.
func (mr *RepositoryMockRecorder) UpsertItems(feedID, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertItems", reflect.TypeOf((*Repository)(nil).UpsertItems), feedID, items)
}
