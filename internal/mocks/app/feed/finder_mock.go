// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubny/lite-reader/internal/app/feed (interfaces: Finder)
//
// Generated by this command:
//
//	mockgen -destination=./app/feed/finder_mock.go -package=mocks -mock_names=Finder=Finder github.com/cubny/lite-reader/internal/app/feed Finder
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Finder is a mock of Finder interface.
type Finder struct {
	ctrl     *gomock.Controller
	recorder *FinderMockRecorder
	isgomock struct{}
}

// FinderMockRecorder is the mock recorder for Finder.
type FinderMockRecorder struct {
	mock *Finder
}

// NewFinder creates a new mock instance.
func NewFinder(ctrl *gomock.Controller) *Finder {
	mock := &Finder{ctrl: ctrl}
	mock.recorder = &FinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Finder) EXPECT() *FinderMockRecorder {
	return m.recorder
}

// FindFeeds mocks base method.
func (m *Finder) FindFeeds(url string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFeeds", url)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFeeds indicates an expected call of FindFeeds.
func (mr *FinderMockRecorder) FindFeeds(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFeeds", reflect.TypeOf((*Finder)(nil).FindFeeds), url)
}
