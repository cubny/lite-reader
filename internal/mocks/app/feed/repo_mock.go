// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubny/lite-reader/internal/app/feed (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=./app/feed/repo_mock.go -package=mocks -mock_names=Repository=Repository github.com/cubny/lite-reader/internal/app/feed Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	feed "github.com/cubny/lite-reader/internal/app/feed"
)

// Repository is a mock of Repository interface.
type Repository struct {
	ctrl     *gomock.Controller
	recorder *RepositoryMockRecorder
}

// RepositoryMockRecorder is the mock recorder for Repository.
type RepositoryMockRecorder struct {
	mock *Repository
}

// NewRepository creates a new mock instance.
func NewRepository(ctrl *gomock.Controller) *Repository {
	mock := &Repository{ctrl: ctrl}
	mock.recorder = &RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Repository) EXPECT() *RepositoryMockRecorder {
	return m.recorder
}

// AddFeed mocks base method.
func (m *Repository) AddFeed(arg0 *feed.Feed) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeed", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeed indicates an expected call of AddFeed.
func (mr *RepositoryMockRecorder) AddFeed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeed", reflect.TypeOf((*Repository)(nil).AddFeed), arg0)
}

// DeleteFeed mocks base method.
func (m *Repository) DeleteFeed(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeed indicates an expected call of DeleteFeed.
func (mr *RepositoryMockRecorder) DeleteFeed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeed", reflect.TypeOf((*Repository)(nil).DeleteFeed), arg0)
}

// GetFeed mocks base method.
func (m *Repository) GetFeed(arg0 int) (*feed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", arg0)
	ret0, _ := ret[0].(*feed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *RepositoryMockRecorder) GetFeed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*Repository)(nil).GetFeed), arg0)
}

// ListFeeds mocks base method.
func (m *Repository) ListFeeds() ([]*feed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeeds")
	ret0, _ := ret[0].([]*feed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeeds indicates an expected call of ListFeeds.
func (mr *RepositoryMockRecorder) ListFeeds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeeds", reflect.TypeOf((*Repository)(nil).ListFeeds))
}
