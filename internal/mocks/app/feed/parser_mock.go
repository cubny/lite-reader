// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubny/lite-reader/internal/app/feed (interfaces: Parser)
//
// Generated by this command:
//
//	mockgen -destination=./app/feed/parser_mock.go -package=mocks -mock_names=Parser=Parser github.com/cubny/lite-reader/internal/app/feed Parser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gofeed "github.com/mmcdole/gofeed"
	gomock "go.uber.org/mock/gomock"
)

// Parser is a mock of Parser interface.
type Parser struct {
	ctrl     *gomock.Controller
	recorder *ParserMockRecorder
	isgomock struct{}
}

// ParserMockRecorder is the mock recorder for Parser.
type ParserMockRecorder struct {
	mock *Parser
}

// NewParser creates a new mock instance.
func NewParser(ctrl *gomock.Controller) *Parser {
	mock := &Parser{ctrl: ctrl}
	mock.recorder = &ParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Parser) EXPECT() *ParserMockRecorder {
	return m.recorder
}

// ParseURL mocks base method.
func (m *Parser) ParseURL(url string) (*gofeed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseURL", url)
	ret0, _ := ret[0].(*gofeed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseURL indicates an expected call of ParseURL.
func (mr *ParserMockRecorder) ParseURL(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseURL", reflect.TypeOf((*Parser)(nil).ParseURL), url)
}
