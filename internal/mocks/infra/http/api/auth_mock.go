// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubny/lite-reader/internal/infra/http/api (interfaces: AuthService)
//
// Generated by this command:
//
//	mockgen -destination=./infra/http/api/auth_mock.go -package=mocks -mock_names=AuthService=AuthService github.com/cubny/lite-reader/internal/infra/http/api AuthService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	auth "github.com/cubny/lite-reader/internal/app/auth"
	gomock "go.uber.org/mock/gomock"
)

// AuthService is a mock of AuthService interface.
type AuthService struct {
	ctrl     *gomock.Controller
	recorder *AuthServiceMockRecorder
	isgomock struct{}
}

// AuthServiceMockRecorder is the mock recorder for AuthService.
type AuthServiceMockRecorder struct {
	mock *AuthService
}

// NewAuthService creates a new mock instance.
func NewAuthService(ctrl *gomock.Controller) *AuthService {
	mock := &AuthService{ctrl: ctrl}
	mock.recorder = &AuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AuthService) EXPECT() *AuthServiceMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *AuthService) GetAllUsers() ([]*auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *AuthServiceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*AuthService)(nil).GetAllUsers))
}

// GetSession mocks base method.
func (m *AuthService) GetSession(token string) (*auth.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", token)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *AuthServiceMockRecorder) GetSession(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*AuthService)(nil).GetSession), token)
}

// Login mocks base method.
func (m *AuthService) Login(command *auth.LoginCommand) (*auth.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", command)
	ret0, _ := ret[0].(*auth.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *AuthServiceMockRecorder) Login(command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*AuthService)(nil).Login), command)
}

// Signup mocks base method.
func (m *AuthService) Signup(command *auth.SignupCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *AuthServiceMockRecorder) Signup(command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*AuthService)(nil).Signup), command)
}
